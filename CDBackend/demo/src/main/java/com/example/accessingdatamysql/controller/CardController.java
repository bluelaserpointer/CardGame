package com.example.accessingdatamysql.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.example.accessingdatamysql.entity.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
// import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import static com.example.accessingdatamysql.GlobalConstants.general_page_size;
// import java.sql.Timestamp;
import java.util.*;

// import javax.validation.constraints.Null;

import com.example.accessingdatamysql.service.CardService;

@CrossOrigin(origins = "*")
@RestController // This means that this class is a Controller
@RequestMapping(path = "/card") // This means URL's start with /demo (after Application path)
public class CardController {
  @Autowired // This means to get the bean called CardRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private CardService CardService;

  @RequestMapping(value = "/getCard")
  public Card findCardByCardId(@RequestParam("cardId") Integer cardId) {
    return CardService.getOneCard(cardId);
  }

  @RequestMapping(value = "/addCard")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public @ResponseBody Card addNewCard(@RequestBody Card newCard) {
    return CardService.addNewCard(newCard);
  }

  @RequestMapping(value = "/updateCard")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public @ResponseBody Card updateCard(@RequestBody Card updateCard) {
    // System.out.println("In controller");

    return CardService.updateCard(updateCard);
  }

  // 获取指定页数的数据
  @RequestMapping(value = "/List")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public JSONObject ListPage(@RequestBody ListRequest ListRequest) {
    ListRequest.setPageSize(general_page_size);
    String request = JSON.toJSONString(ListRequest);
    System.out.print(request);
    JSONObject response = CardService.ListPage(ListRequest);
    return response;
  }

  @RequestMapping(value = "/getAllCards")
  public List<Card> getAllCards() {
    return CardService.getAllCards();
  }

  @RequestMapping(value = "/deleteCards")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public String deleteCards(@RequestParam("cardIds") List<Integer> cardIds) {
    return CardService.deleteCards(cardIds);
  }

  @RequestMapping(value = "/deleteAllCards")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public String deleteAll() {
    return CardService.deleteAll();
  }

  @RequestMapping(value = "/deleteCard")
  @PreAuthorize("hasRole('ROLE_ADMIN')")
  public List<Card> deleteCard(@RequestParam("cardId") Integer cardId) {
    return CardService.deleteCard(cardId);
  }

}
