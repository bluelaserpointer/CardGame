package com.example.accessingdatamysql.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import com.example.accessingdatamysql.entity.*;

import com.example.accessingdatamysql.service.ChapterService;

@CrossOrigin(origins = "*")
@RestController // This means that this class is a Controller
@RequestMapping(path = "/chapter") // This means URL's start with /demo (after Application path)
public class ChapterController {
    @Autowired // This means to get the bean called chapterRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ChapterService chapterService;

    // @RequestMapping(value = "/getChapter")
    // public ChapterDetails findChapterByChapterId(@RequestParam("chapterId")
    // Integer chapterId) {
    // return chapterService.getOneChapter(chapterId);
    // }
    //
    // @RequestMapping(value = "/addChapter")
    // public @ResponseBody
    // String addNewChapter(@RequestParam("chapterName") String chapterName,
    // @RequestParam("email") String email,
    // @RequestParam("password") String password, @RequestParam("phoneNumber")
    // String phoneNumber) {
    // return chapterService.addNewChapter(chapterName, email, password,
    // phoneNumber);
    //
    // }

    @RequestMapping(value = "/updateChapterPhaseStrategy")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public @ResponseBody List<ChapterDetails> updateChapterPhaseStrategy(@RequestParam("chapterId") Integer chapterId,
            @RequestParam("phaseId") Integer phaseId, @RequestParam("phaseData") String phaseData)
            throws JsonProcessingException {
        System.out.println("ChapterId: " + chapterId);
        System.out.println("PhaseId: " + phaseId);
        System.out.println("PhaseData: " + phaseData);

        return chapterService.updateChapterPhaseStrategy(chapterId, phaseId, phaseData);
    }

    @RequestMapping(value = "/updateChapterPhaseAwards")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public @ResponseBody List<ChapterPhase> updateChapterPhaseAwards(@RequestParam("chapterId") Integer chapterId,
            @RequestParam("phaseId") Integer phaseId, @RequestParam("awardItems") String awardItems,
            @RequestParam("awardCards") String awardCards) throws JsonProcessingException {
        return chapterService.updateChapterPhaseAwards(chapterId, phaseId, awardItems, awardCards);
    }

    @RequestMapping(value = "/updateChapterAwards")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public @ResponseBody List<Chapter> updateChapterAwards(@RequestParam("chapterId") Integer chapterId,
            @RequestParam("awardItems") String awardItems, @RequestParam("awardCards") String awardCards)
            throws JsonProcessingException {
        return chapterService.updateChapterAwards(chapterId, awardItems, awardCards);
    }

    @RequestMapping(value = "/getAllChapters")
    public List<Chapter> getAllChapters() {
        System.out.println("In controller");
        return chapterService.getAllChapters();
    }

    @RequestMapping(value = "/getChapterDetailsByChapterAndByPhase")
    public List<ChapterDetails> getChapterDetailsByChapterAndByPhase(@RequestParam("chapterId") Integer chapterId,
            @RequestParam("phaseId") Integer phaseId) {
        return chapterService.getChapterDetailsByChapterAndByPhase(chapterId, phaseId);
    }

    @RequestMapping(value = "/getChapterDetailsByChapter")
    public List<ChapterDetails> getChapterDetailsByChapter(@RequestParam("chapterId") Integer chapterId) {
        return chapterService.getChapterDetailsByChapter(chapterId);
    }

    @RequestMapping(value = "/getAllChapterDetails")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<ChapterDetails> getAllChapterDetails() {
        return chapterService.getAllChapterDetails();
    }

    @RequestMapping(value = "/getChapterPhasesByChapter")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<ChapterPhase> getChapterPhasesByChapter(@RequestParam("chapterId") Integer chapterId) {
        System.out.println("Getting ChapterPhases by Chapter");
        System.out.println(chapterId);
        return chapterService.getChapterPhasesByChapter(chapterId);
    }

    @RequestMapping(value = "/deleteChapter")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<Chapter> deleteChapter(@RequestParam("chapterId") Integer chapterId) {
        return chapterService.deleteChapter(chapterId);
    }

    @RequestMapping(value = "/updateChapter")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<Chapter> updateChapter(@RequestParam("chapterId") Integer chapterId,
            @RequestParam("phaseNo") Integer phaseNo, @RequestParam("phaseType") Integer phaseType) {
        return chapterService.updateChapter(chapterId, phaseNo, phaseType);
    }

    @RequestMapping(value = "/addChapter")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<Chapter> addChapter(@RequestParam("phaseNo") Integer phaseNo,
            @RequestParam("phaseType") Integer phaseType) {
        return chapterService.addChapter(phaseNo, phaseType);
    }

    // @RequestMapping(value = "/deleteChapters")
    // public String deleteChapters(@RequestParam("chapterIds") List<Integer>
    // chapterIds) {
    // return chapterService.deleteChapters(chapterIds);
    // }
    //
    // @RequestMapping(value = "/deleteAllChapters")
    // public String deleteAll() {
    // return chapterService.deleteAll();
    // }

}
