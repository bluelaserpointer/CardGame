package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.entity.*;
import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.util.*;

// import javax.validation.constraints.Null;

import com.example.accessingdatamysql.service.UserService;

@CrossOrigin(origins = "*")
@RestController // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserService userService;

  @RequestMapping(value = "/getUser")
  public User findUserByUserId(@RequestParam("userId") Integer userId) {
    return userService.getOneUser(userId);
  }

  @RequestMapping(value = "/addUser")
  public @ResponseBody String addNewUser(@RequestParam("userName") String userName, @RequestParam("email") String email,
      @RequestParam("password") String password, @RequestParam("phoneNumber") String phoneNumber) {
    return userService.addNewUser(userName, email, password, phoneNumber);

  }

  @RequestMapping(value = "/updateUser")
  public @ResponseBody String updateUser(@RequestParam("userId") Integer userId,
      @RequestParam("userName") String userName, @RequestParam("email") String email,
      @RequestParam("password") String password, @RequestParam("phoneNumber") String phoneNumber,
      @RequestParam("credits") Integer credits, @RequestParam("access") Boolean access,
      @RequestParam("level") Integer level) {
    return userService.updateUser(userId, userName, email, password, phoneNumber, credits, access, level);
  }

  @RequestMapping(value = "/getAllUsers")
  public List<User> getAllUsers() {
    return userService.getAllUsers();
  }

  @RequestMapping(value = "/deleteUsers")
  public String deleteUsers(@RequestParam("userIds") List<Integer> userIds) {
    return userService.deleteUsers(userIds);
  }

  @RequestMapping(value = "/deleteAllUsers")
  public String deleteAll() {
    return userService.deleteAll();
  }

  @RequestMapping(value = "/identifyUser")
  public boolean identifyUser(@RequestParam("userName") String userName, @RequestParam("password") String password)
  {
    return userService.identifyUser(userName, password);
  }

  @RequestMapping(value = "/deleteUser")
  public List<User> deleteUser(@RequestParam("userId") Integer userId)
  {
    return userService.deleteUser(userId);
  }
}
