package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.entity.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import com.example.accessingdatamysql.Security.JwtUtil;
// import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

// import java.sql.Timestamp;
import java.util.*;

// import javax.validation.constraints.Null;

import com.example.accessingdatamysql.service.AdminService;

@CrossOrigin(origins = "*")
@RestController // This means that this class is a Controller
@RequestMapping(path = "/admin") // This means URL's start with /demo (after Application path)
public class AdminController {

  @Autowired
  private AuthenticationManager authenticationManager;

  @Autowired
  private JwtUtil jwtUtil;
  @Autowired // This means to get the bean called AdminRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private AdminService AdminService;

  @RequestMapping(value = "/getAdmin")
  public Admin findAdminByAdminId(@RequestParam("adminId") Integer adminId) {
    return AdminService.getOneAdmin(adminId);
  }

  @PostMapping(value = "/register")
  public @ResponseBody Admin addNewAdmin(@RequestBody Admin registerAdmin) {
    return AdminService.addNewAdmin(registerAdmin);
  }

  @PostMapping(value = "/updateAdmin")
  public @ResponseBody Admin updateAdmin(@RequestBody Admin updateAdmin) {
    return AdminService.updateAdmin(updateAdmin);
  }

  @RequestMapping(value = "/getAllAdmins")
  public List<Admin> getAllAdmins() {
    return AdminService.getAllAdmins();
  }

  @RequestMapping(value = "/deleteAdmins")
  public String deleteAdmins(@RequestParam("adminIds") List<Integer> adminIds) {
    return AdminService.deleteAdmins(adminIds);
  }

  @RequestMapping(value = "/deleteAllAdmins")
  public String deleteAll() {
    return AdminService.deleteAll();
  }

  @PostMapping(value = "/login")
  public String identifyAdmin(@RequestBody Admin loginAdmin) {
    // System.out.println(adminName);
    // System.out.println(password);
    try {
      authenticationManager
          .authenticate(new UsernamePasswordAuthenticationToken(loginAdmin.getAdminName(), loginAdmin.getPassword()));
    } catch (Exception ex) {
      throw ex;
    }
    return jwtUtil.generateToken(loginAdmin.getAdminName());
  }

  @RequestMapping(value = "/getAdminName")
  public List<String> getAdminNames() {
    return AdminService.getAllAdminNames();
  };

  @RequestMapping(value = "/getAdminRole")
  public Integer getAdminRole(@RequestParam("adminName") String adminName) {
    return AdminService.getAdminRole(adminName);
  };

  @RequestMapping(value = "/deleteAdmin")
  public List<Admin> deleteAdmin(@RequestParam("adminId") Integer adminId) {
    return AdminService.deleteAdmin(adminId);
  }

}
